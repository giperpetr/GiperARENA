name: Build and Deploy GiperARENA

on:
  push:
    branches: [master]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'realtime/**'
      - 'media/**'
      - 'blockchain/**'
      - 'shared/**'
      - 'docker-compose.prod.yml'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: giperpetr/giperarena

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      matrix:
        service: [frontend, backend]
        # TODO: Добавить когда будут готовы: realtime, media, blockchain
        include:
          - service: frontend
            context: .
            dockerfile: ./frontend/Dockerfile
            port: 3000
          - service: backend
            context: .
            dockerfile: ./backend/Dockerfile
            port: 3000
          # TODO: Раскомментировать когда будут готовы:
          # - service: realtime
          #   context: .
          #   dockerfile: ./realtime/Dockerfile
          #   port: 3001
          # - service: media
          #   context: .
          #   dockerfile: ./media/Dockerfile
          #   port: 3002
          # - service: blockchain
          #   context: .
          #   dockerfile: ./blockchain/Dockerfile
          #   port: 3003

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=${{ matrix.service }}
            org.opencontainers.image.description=GiperARENA ${{ matrix.service }} service
            org.opencontainers.image.vendor=GiperARENA

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:buildcache,mode=max
          build-args: |
            CACHEBUST=${{ github.sha }}

      - name: Image size report
        if: github.event_name != 'pull_request'
        run: |
          echo "📊 Image size report for ${{ matrix.service }}:"
          docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:latest --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"

  deploy-to-server:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            # Переход в рабочую директорию
            cd /root/giperarena || {
              echo "📁 Создание директории /root/giperarena..."
              mkdir -p /root/giperarena
              cd /root/giperarena
            }

            # Вход в GitHub Container Registry
            echo "🔑 Авторизация в GHCR..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Получаем короткий SHA (первые 7 символов)
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)

            # Загрузка новых образов с SHA тегом
            echo "📦 Загрузка новых SLIM образов (SHA: ${SHORT_SHA})..."
            docker pull ghcr.io/giperpetr/giperarena/frontend:master-${SHORT_SHA}
            docker pull ghcr.io/giperpetr/giperarena/backend:master-${SHORT_SHA}

            # Тегируем как latest для совместимости
            docker tag ghcr.io/giperpetr/giperarena/frontend:master-${SHORT_SHA} ghcr.io/giperpetr/giperarena/frontend:latest
            docker tag ghcr.io/giperpetr/giperarena/backend:master-${SHORT_SHA} ghcr.io/giperpetr/giperarena/backend:latest

            # Проверка размеров образов
            echo "📊 Размеры SLIM образов:"
            docker images ghcr.io/giperpetr/giperarena/* --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"

            # Создание docker-compose.prod.yml
            echo "📋 Создание production конфигурации..."
            cat > docker-compose.prod.yml << 'COMPOSE_EOF'
            name: giperarena

            services:
              frontend:
                image: ghcr.io/giperpetr/giperarena/frontend:latest
                container_name: giperarena-frontend
                restart: unless-stopped
                environment:
                  - NODE_ENV=production
                  - PORT=3000
                  - HOSTNAME=0.0.0.0
                  - NEXT_PUBLIC_API_URL=https://api.giperarena.space
                  - NEXT_PUBLIC_WS_URL=wss://ws.giperarena.space
                  - NEXT_PUBLIC_MEDIA_URL=https://media.giperarena.space
                  - NEXT_PUBLIC_SUPABASE_URL=https://api.gipergiraffe.com
                  - NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.ANON_KEY }}
                networks:
                  - proxy
                labels:
                  - "traefik.enable=true"
                  - "traefik.docker.network=proxy"
                  - "traefik.http.routers.giperarena-frontend.rule=Host(`giperarena.space`)"
                  - "traefik.http.routers.giperarena-frontend.entrypoints=websecure"
                  - "traefik.http.routers.giperarena-frontend.tls.certresolver=letsencrypt"
                  - "traefik.http.services.giperarena-frontend.loadbalancer.server.port=3000"
                  - "traefik.http.middlewares.giperarena-frontend-compress.compress=true"
                  - "traefik.http.routers.giperarena-frontend.middlewares=giperarena-frontend-compress"
                healthcheck:
                  test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 40s

              backend:
                image: ghcr.io/giperpetr/giperarena/backend:latest
                container_name: giperarena-backend
                restart: unless-stopped
                environment:
                  - NODE_ENV=production
                  - PORT=3000
                  - DATABASE_URL=postgresql://postgres.giper_prod:${{ secrets.POSTGRES_PASSWORD }}@supavisor:5432/postgres
                  - REDIS_URL=redis://:${{ secrets.REDIS_PASSWORD }}@queue-redis:6379/2
                  - S3_ENDPOINT=http://minio:9000
                  - S3_ACCESS_KEY=${{ secrets.MINIO_ROOT_USER }}
                  - S3_SECRET_KEY=${{ secrets.MINIO_ROOT_PASSWORD }}
                  - S3_BUCKET=giperarena
                  - SUPABASE_URL=https://api.gipergiraffe.com
                  - SUPABASE_ANON_KEY=${{ secrets.ANON_KEY }}
                  - SUPABASE_SERVICE_KEY=${{ secrets.SERVICE_ROLE_KEY }}
                  - JWT_SECRET=${{ secrets.JWT_SECRET }}
                networks:
                  - proxy
                  - supabase_default
                labels:
                  - "traefik.enable=true"
                  - "traefik.docker.network=proxy"
                  - "traefik.http.routers.giperarena-api.rule=Host(`api.giperarena.space`)"
                  - "traefik.http.routers.giperarena-api.entrypoints=websecure"
                  - "traefik.http.routers.giperarena-api.tls.certresolver=letsencrypt"
                  - "traefik.http.services.giperarena-api.loadbalancer.server.port=3000"
                healthcheck:
                  test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3

            networks:
              proxy:
                external: true
              supabase_default:
                external: true
            COMPOSE_EOF

            # Валидация docker-compose.prod.yml
            echo "🧪 Валидация docker-compose.prod.yml..."
            docker compose -f docker-compose.prod.yml config || {
              echo "❌ Ошибка в docker-compose.prod.yml"
              cat docker-compose.prod.yml
              exit 1
            }

            # Остановка старых контейнеров
            echo "🛑 Остановка старых контейнеров..."
            docker compose -f docker-compose.prod.yml down --remove-orphans || true

            # Запуск новых контейнеров
            echo "🚀 Запуск новых SLIM контейнеров..."
            docker compose -f docker-compose.prod.yml up -d

            # Ожидание запуска
            echo "⏱️ Ожидание готовности сервисов..."
            sleep 45

            # Проверка состояния
            echo "🔍 Проверка состояния сервисов..."
            docker compose -f docker-compose.prod.yml ps

            # Проверка логов
            echo "📋 Проверка логов (последние 30 строк)..."
            docker compose -f docker-compose.prod.yml logs --tail=30 frontend || true
            docker compose -f docker-compose.prod.yml logs --tail=30 backend || true

            # Проверка доступности через домены
            echo "🌍 Проверка доступности..."
            curl -k -I https://giperarena.space/ || echo "Frontend пока недоступен"
            curl -k -I https://api.giperarena.space/health || echo "Backend API пока недоступен"

            # Очистка старых образов
            echo "🧹 Очистка старых образов..."
            docker image prune -f

            echo "✅ Деплой завершён успешно!"
